import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# إنشاء البيانات الوهمية
data = {
    'اسم العميل': ['أحمد علي', 'سارة محمد', 'محمود إبراهيم', 'منى يوسف', 'طارق خالد'],
    'العمر': [30, 25, 35, 28, 40],
    'المدينة': ['دمشق', 'حلب', 'اللاذقية', 'دير الزور', 'إدلب'],
    'الدولة': ['سوريا', 'سوريا', 'سوريا', 'سوريا', 'سوريا'],
    'تاريخ التعيين': ['2020-06-01', '2021-07-15', '2019-05-10', '2022-03-23', '2018-11-11'],
    'الوظيفة': ['محلل بيانات', 'مطور ويب', 'مهندس كهربائي', 'محاسب', 'مدير مشروع'],
    'الراتب': [50000, 45000, 60000, 40000, 70000],
    'المنتج': ['حاسوب', 'هاتف ذكي', 'شاشة', 'لابتوب', 'كاميرا'],
    'الفئة': ['إلكترونيات', 'إلكترونيات', 'إلكترونيات', 'إلكترونيات', 'كاميرات'],
    'السعر': [1500, 800, 1000, 1200, 700],
    'الكمية المباعة': [3, 2, 5, 1, 4],
    'الإجمالي': [4500, 1600, 5000, 1200, 2800],
    'طريقة الدفع': ['بطاقة ائتمان', 'نقدًا', 'تحويل بنكي', 'بطاقة ائتمان', 'نقدًا'],
    'تاريخ البيع': ['2025-03-01', '2025-03-02', '2025-03-05', '2025-03-07', '2025-03-10']
}

#تحويل البيانات إلى DataFrame
df = pd.DataFrame(data)

# 1. تنظيف البيانات (التأكد من عدم وجود قيم مفقودة أو تكرار)
df_cleaned = df.drop_duplicates()  # إزالة التكرار
df_cleaned['تاريخ البيع'] = pd.to_datetime(df_cleaned['تاريخ البيع'])  # تحويل تاريخ البيع إلى نوع تاريخي
df_cleaned.isnull().sum()  # التحقق من القيم المفقودة

# 2. تحليل البيانات (إحصائيات وصفية)
print("الإحصائيات الوصفية للبيانات:")
print(df_cleaned.describe())

# 3. فرز البيانات (ترتيب حسب العمر أو الراتب)
sorted_by_age = df_cleaned.sort_values(by='العمر')
sorted_by_salary = df_cleaned.sort_values(by='الراتب', ascending=False)

# 4. الفلترة (على سبيل المثال، فلترة العملاء الذين قاموا بدفع نقدًا)
filtered_data = df_cleaned[df_cleaned['طريقة الدفع'] == 'نقدًا']

# 5. تصور البيانات (رسم بياني للمبيعات الإجمالية لكل منتج)
plt.figure(figsize=(10, 6))
plt.bar(df_cleaned['المنتج'], df_cleaned['الإجمالي'], color='skyblue')
plt.title('إجمالي المبيعات لكل منتج')
plt.xlabel('المنتج')
plt.ylabel('الإجمالي')
plt.show()

# 6. تحليل الاتجاهات (مقارنة المبيعات عبر التواريخ المختلفة)
sales_by_date = df_cleaned.groupby('تاريخ البيع')['الإجمالي'].sum()

# رسم بياني للاتجاهات الزمنية للمبيعات
plt.figure(figsize=(10, 6))
plt.plot(sales_by_date.index, sales_by_date.values, marker='o', color='orange')
plt.title('اتجاه المبيعات عبر التواريخ')
plt.xlabel('تاريخ البيع')
plt.ylabel('إجمالي المبيعات')
plt.xticks(rotation=45)
plt.show()

# 7. تحليل الارتباط (على سبيل المثال، الارتباط بين الراتب والإجمالي)
correlation = df_cleaned[['الراتب', 'الإجمالي']].corr()
print("\nمصفوفة الارتباط بين الراتب والإجمالي:")
print(correlation)

# 8. التعامل مع القيم المفقودة (إن وجدت)
# يمكن استبدال القيم المفقودة في الأعمدة المناسبة بقيم معينة أو حذف الصفوف ذات القيم المفقودة
df_cleaned = df_cleaned.fillna({'الراتب': df_cleaned['الراتب'].mean()})

# عرض البيانات النهائية
print("\nالبيانات بعد المعالجة النهائية:")
print(df_cleaned)
